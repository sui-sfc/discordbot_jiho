from _typeshed import Incomplete
from six.moves.BaseHTTPServer import BaseHTTPRequestHandler

class SpotifyOauthError(Exception):
    error: Incomplete
    error_description: Incomplete
    def __init__(self, message, error: Incomplete | None = ..., error_description: Incomplete | None = ..., *args, **kwargs) -> None: ...

class SpotifyStateError(SpotifyOauthError):
    def __init__(self, local_state: Incomplete | None = ..., remote_state: Incomplete | None = ..., message: Incomplete | None = ..., error: Incomplete | None = ..., error_description: Incomplete | None = ..., *args, **kwargs) -> None: ...

class SpotifyAuthBase:
    def __init__(self, requests_session) -> None: ...
    @property
    def client_id(self): ...
    @client_id.setter
    def client_id(self, val) -> None: ...
    @property
    def client_secret(self): ...
    @client_secret.setter
    def client_secret(self, val) -> None: ...
    @property
    def redirect_uri(self): ...
    @redirect_uri.setter
    def redirect_uri(self, val) -> None: ...
    @staticmethod
    def is_token_expired(token_info): ...
    def __del__(self) -> None: ...

class SpotifyClientCredentials(SpotifyAuthBase):
    OAUTH_TOKEN_URL: str
    client_id: Incomplete
    client_secret: Incomplete
    proxies: Incomplete
    requests_timeout: Incomplete
    cache_handler: Incomplete
    def __init__(self, client_id: Incomplete | None = ..., client_secret: Incomplete | None = ..., proxies: Incomplete | None = ..., requests_session: bool = ..., requests_timeout: Incomplete | None = ..., cache_handler: Incomplete | None = ...) -> None: ...
    def get_access_token(self, as_dict: bool = ..., check_cache: bool = ...): ...

class SpotifyOAuth(SpotifyAuthBase):
    OAUTH_AUTHORIZE_URL: str
    OAUTH_TOKEN_URL: str
    client_id: Incomplete
    client_secret: Incomplete
    redirect_uri: Incomplete
    state: Incomplete
    scope: Incomplete
    cache_handler: Incomplete
    proxies: Incomplete
    requests_timeout: Incomplete
    show_dialog: Incomplete
    open_browser: Incomplete
    def __init__(self, client_id: Incomplete | None = ..., client_secret: Incomplete | None = ..., redirect_uri: Incomplete | None = ..., state: Incomplete | None = ..., scope: Incomplete | None = ..., cache_path: Incomplete | None = ..., username: Incomplete | None = ..., proxies: Incomplete | None = ..., show_dialog: bool = ..., requests_session: bool = ..., requests_timeout: Incomplete | None = ..., open_browser: bool = ..., cache_handler: Incomplete | None = ...) -> None: ...
    def validate_token(self, token_info): ...
    def get_authorize_url(self, state: Incomplete | None = ...): ...
    def parse_response_code(self, url): ...
    @staticmethod
    def parse_auth_response_url(url): ...
    def get_auth_response(self, open_browser: Incomplete | None = ...): ...
    def get_authorization_code(self, response: Incomplete | None = ...): ...
    def get_access_token(self, code: Incomplete | None = ..., as_dict: bool = ..., check_cache: bool = ...): ...
    def refresh_access_token(self, refresh_token): ...
    def get_cached_token(self): ...

class SpotifyPKCE(SpotifyAuthBase):
    OAUTH_AUTHORIZE_URL: str
    OAUTH_TOKEN_URL: str
    client_id: Incomplete
    redirect_uri: Incomplete
    state: Incomplete
    scope: Incomplete
    cache_handler: Incomplete
    proxies: Incomplete
    requests_timeout: Incomplete
    code_verifier: Incomplete
    code_challenge: Incomplete
    authorization_code: Incomplete
    open_browser: Incomplete
    def __init__(self, client_id: Incomplete | None = ..., redirect_uri: Incomplete | None = ..., state: Incomplete | None = ..., scope: Incomplete | None = ..., cache_path: Incomplete | None = ..., username: Incomplete | None = ..., proxies: Incomplete | None = ..., requests_timeout: Incomplete | None = ..., requests_session: bool = ..., open_browser: bool = ..., cache_handler: Incomplete | None = ...) -> None: ...
    def get_authorize_url(self, state: Incomplete | None = ...): ...
    def get_authorization_code(self, response: Incomplete | None = ...): ...
    def validate_token(self, token_info): ...
    def get_pkce_handshake_parameters(self) -> None: ...
    def get_access_token(self, code: Incomplete | None = ..., check_cache: bool = ...): ...
    def refresh_access_token(self, refresh_token): ...
    def parse_response_code(self, url): ...
    @staticmethod
    def parse_auth_response_url(url): ...
    def get_cached_token(self): ...

class SpotifyImplicitGrant(SpotifyAuthBase):
    OAUTH_AUTHORIZE_URL: str
    client_id: Incomplete
    redirect_uri: Incomplete
    state: Incomplete
    cache_handler: Incomplete
    scope: Incomplete
    show_dialog: Incomplete
    def __init__(self, client_id: Incomplete | None = ..., redirect_uri: Incomplete | None = ..., state: Incomplete | None = ..., scope: Incomplete | None = ..., cache_path: Incomplete | None = ..., username: Incomplete | None = ..., show_dialog: bool = ..., cache_handler: Incomplete | None = ...) -> None: ...
    def validate_token(self, token_info): ...
    def get_access_token(self, state: Incomplete | None = ..., response: Incomplete | None = ..., check_cache: bool = ...): ...
    def get_authorize_url(self, state: Incomplete | None = ...): ...
    def parse_response_token(self, url, state: Incomplete | None = ...): ...
    @staticmethod
    def parse_auth_response_url(url): ...
    def get_auth_response(self, state: Incomplete | None = ...): ...
    def get_cached_token(self): ...

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self) -> None: ...
    def log_message(self, format, *args) -> None: ...
